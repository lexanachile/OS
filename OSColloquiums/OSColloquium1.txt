Теоретические вопросы: 
1 вариант: 
1) ООП - полное определение 
2) Объектно ориентированная декомпозиция 
3) Дизайн ПО - определение, примеры 
4) Магическое число 7 Миллера в контексте АйТи (не менее 7 примеров из АйТи) 
5) 5 признаков сложных систем по Гради Бучу (привести не менее 3 примеров АйТи систем, провести их через каждый из признаков)


1) ООП это методология программирования которая позволяет структурировать большие системы так, чтобы их можно было поддерживать и
масштабировать не одним человеком, а коллективом (и делать это безопасно)
это достигается за счет представления приложения ввиде совокупности блоков (объектов) и выстраивания иерархии классов (инкапсуляция, наследование и полиморфизм)
при ООП у каждого задействованного разработчика есть своя ограниченная зона ответсвенности (классы и методы), а вся ключевая логика 
скрыта за интерфейсами

2) Объектно-ориентированная декомпозиция это метод выделения в системе объектов и классов, соответствующих ключевым бизнес-сущностям, ролям и процессам, с чётко ограниченной ответственностью каждого компонента. Такая модель позволяет строить систему из взаимосвязанных, но независимых модулей и значительно упрощает их поддержку, расширение и адаптацию без затрагивания других частей, а также минимизирует внутреннюю связность кода

3) Дизайн ПО это процесс моделирования архитектуры и связей компонентов системы, обеспечивающий надёжность, гибкость и удобную масштабируемость программы. Примеры профессионального дизайна это архитектура клиент-сервер с четким разграничением функций на клиента, сервер и БД, внедрение шаблонов проектирования для отделения логики от представления и организацию программ с разделением бизнес-логики и интерфейса

4) Магическое число 7 Миллера это закономерность, ограничивающая рабочую память пользователя диапазоном 7 элементов(+-2). В IT этот принцип прямо влияет оптимальное число пунктов меню, вкладок и кнопок всегда стремится к 7, чтобы интерфейс оставался легким для восприятия и не создавал когнитивную перегрузку. Дизайнеры должны осознанно ограничивать количество однородных элементов в интерфейсах для поддержания интуитивности и управляемости интерфейса пользователем

5) По Гради Бучу, сложные системы характеризуются иерархичностью (разделением на слои и компоненты), эмержентностью (возникновением новых свойств за счет взаимодействия частей), высокой связностью (множество зависимостей), скрытой сложностью (механизмы, неочевидные снаружи) и изменчивостью. 
Операционная система иллюстрирует эти признаки через строительство из модулей разного уровня и постоянный рост функциональности на фоне строгих зависимостей между процессами, драйверами, и сервисами, где немалую роль играет скрытое управление ресурсами и постоянная адаптация к новым платформам
Еще пример, интернет-магазин это сочетание фронтенда, бекэнда и баз данных, обладая системным поведением только во взаимодействии всех компонентов, что выражается в связанных процессах оформления заказа, авторизации и платежей; при этом скрытая сложность отражена в обработке транзакций и интеграции сторонних сервисов, а изменчивость  в частых обновлениях сервиса